import java.util.LinkedList;
import java.util.Queue;
import java.util.HashMap;
import java.util.ArrayList;

public class binaryTree {
    //Binary Tree : Hierarchical data structure.
    // * Binary tree at max 2 children
    // * level and subtree in a tree as,. 


    // Build tree preorder : 
    static class Node{
        int data;
        Node left,right;
        public Node(int data){
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    static int idx = -1;
    public static Node buildTree(int Nodes[]){
        idx++;
        if(Nodes[idx] == -1){
            return null;
        }
        Node newNode = new Node(Nodes[idx]);
        newNode.left = buildTree(Nodes);
        newNode.right = buildTree(Nodes);
        return newNode;
    }



    //tree traverdals : 1.Preorder  2.Inorder  3.Postorder  4.levelorder
    // 1.preorder
    public static void preOrder(Node root){
        if(root == null){
            return;
        }
        System.out.print(root.data + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    //2.Inorder
    public static void inOreder(Node root){
        if(root == null){
            return;
        }
        inOreder(root.left);
        System.out.print(root.data + " ");
        inOreder(root.right);
    }

    // 3.Postorder
    public static void postOrder(Node root){
        if(root == null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data + " ");
    }


    // 4.levelorder traversal
    public static void levelOreder(Node root){
        if(root == null){
            return;
        }
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);

        while(!q.isEmpty()){
            Node curr = q.remove();
            if(curr == null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }else{
                    q.add(null);
                }
            }else{
                System.out.print(curr.data + " ");
                if(curr.left != null){
                    q.add(curr.left);
                }
                if(curr.right != null){
                    q.add(curr.right);
                }
            }
        }
    }



    // height of a tree : 
    public static int heightOfTree(Node root){
        if(root == null){
            return 0;
        }
        int lh = heightOfTree(root.left);
        int rh = heightOfTree(root.right);
        return Math.max(lh, rh)+ 1;
    }


    // Count the no. of nodes :
    public static int numberOfNodes(Node root){
        if(root == null){
            return 0;
        }
        int lc = numberOfNodes(root.left);
        int rc = numberOfNodes(root.right);
        return (lc + rc + 1);
    }


    //sum of Nodes : 
    public static int sumOfNode(Node root){
        if(root == null){
            return 0;
        }
        int ls = sumOfNode(root.left);
        int rs = sumOfNode(root.right);
        return (ls + rs + root.data);
    }


    // diameter of a tree : 0(n^2)
    // Approach 1 : 1.dia. pass though root
    //              2.dia. not pass though root
    public static int diameter(Node root){
        if(root == null){
            return 0;
        }
        int ld = diameter(root.left);
        int rd = diameter(root.right);
        int lh = heightOfTree(root.left);
        int rh = heightOfTree(root.right);
        
        int selfDia = lh + rh + 1;
        return Math.max(selfDia,Math.max(ld,rd));

    }

    // Approach 2 : 0(n) 
    static class Info{
        int dia,ht;
        public Info(int dia, int ht){
            this.dia = dia;
            this.ht = ht;
        }
    }

    public static Info diameter2(Node root){
        if(root == null){
            return new Info(0,0);
        }
        Info linfo = diameter2(root.left);
        Info rinfo = diameter2(root.right);

        int dia = Math.max(Math.max(linfo.dia,rinfo.dia),(linfo.ht + rinfo.ht + 1));
        int ht = Math.max(linfo.ht,rinfo.ht) + 1;
        return new Info(dia,ht);
    }



    // Lowest Comman Ancestor : 
    // Approach : 1. 0(n)
    //            2. 0(n)

    // Approach 1
    public static boolean getPath(Node root, int n, ArrayList<Node> path){
        if(root == null){
            return false;
        }
        path.add(root);
        if(root.data == n){
            return true;
        }
        boolean foundleft = getPath(root.left,n,path);
        boolean foundright = getPath(root.right,n,path);

        if(foundleft || foundright){
            return true;
        }

        path.remove(path.size()-1);
        return false;
    }

    public static Node lca1(Node root, int n1, int n2){
        ArrayList<Node> path1 = new ArrayList<>();
        ArrayList<Node> path2 = new ArrayList<>();

        getPath(root,n1,path1);
        getPath(root,n2,path2);

        int i = 0;

        for(; i<path1.size() && i<path2.size(); i++){
            if(path1.get(i) != path2.get(i)){
                break;
            }
        }
        Node lca = path1.get(i-1); // last equal Node --> (i-1)th
        return lca;
    }


    // Approach 2
    public static Node lca(Node root, int n1, int n2){
        if(root == null || root.data == n1 || root.data == n2){
            return root;
        }
        Node leftLca = lca(root.left,n1,n2);
        Node rightLca = lca(root.right,n1,n2);

        //leftlca = val & right = null
        if(rightLca == null){
            return leftLca;
        }
        //rightlca = val & left = null
        if(leftLca == null){
            return rightLca;
        }

        return root;
    }



    //Minimum Distance Between Nodes : 
    public static int minDist(Node root, int n1, int n2){
        Node lca = lca(root, n1, n2);
        int dist1 = lcaDist(lca,n1);
        int dist2 = lcaDist(lca,n2);
        return dist1 + dist2;
    }

    public static int lcaDist(Node root, int n){
        if(root == null){
            return -1;
        }
        if(root.data == n){
            return 0;
        }

        int leftDist = lcaDist(root.left, n);
        int rightDis = lcaDist(root.right, n);

        if(leftDist == -1 && rightDis == -1){
            return -1;
        }
        else if(leftDist == -1){
            return rightDis + 1;
        }else{
            return leftDist + 1;
        }
    }




    // Subtree of another tree : given the roots of two binary trees (root & subtree) return true if there is a 
    //                           subtree of root with the same structure & node value of subroot & false otherwise.
    // Approach : 1.find subroot in tree
    //            2.check identical/ non-identical
    //            3.if(node.data != subroot.data)
    public static boolean isSubTree(Node root, Node subroot){
        if(root == null){
            return false;
        }
        if(root.data == subroot.data){
            return isIdentical(root,subroot);
        }

        return isSubTree(root.left, subroot) || isSubTree(root.right, subroot);
    }

    public static boolean isIdentical(Node root, Node subtree){
        if(root == null && subtree == null){
            return true;
        }
        else if(root == null || subtree == null || root.data != subtree.data){
            return false;
        }
        if(!isIdentical(root.left, subtree.left)){
            return false;
        }
        if(!isIdentical(root.right, subtree.right)){
            return false;
        }
        return true;
    }




    // Top view of a tree :
    // Approach : level order traversal
    //            add in HashMap & track min,max(key)
    //            loop (min --> max)--> print it
    static class Inf{
        Node node;
        int hd;
        public Inf(Node n, int hd){
            this.node = n;
            this.hd = hd;
        }
    }

    public static void topView(Node root){
        //level order traversal
        Queue<Inf> q = new LinkedList<>();
        HashMap<Integer,Node> map = new HashMap<>();
        int min=0, max=0;
        q.add(new Inf(root,0));
        q.add(null);

        while(!q.isEmpty()){
            Inf curr = q.remove();
            if(curr == null){
                if(q.isEmpty()){
                    break;
                }else{
                    q.add(null);
                }
            }
            else{
                if(!map.containsKey(curr.hd)){//first time hd is occur
                    map.put(curr.hd, curr.node);
                }
                if(curr.node.left != null){
                    q.add(new Inf(curr.node.left,curr.hd-1));
                    min = Math.min(min,curr.hd-1);
                }
                if(curr.node.right != null){
                    q.add(new Inf(curr.node.right,curr.hd+1));
                    max = Math.max(max,curr.hd+1);
                }
            }
        }
        for(int i=min; i<=max ; i++){
            System.out.println(map.get(i).data + " ");
        }
        System.out.println();
    }




    //Kth level :
    public static void klevel(Node root,int level,int k){
        if(root == null){
            return;
        }
        if(level == k){
            System.out.print(root.data + " ");
            return;
        }
        klevel(root.left, level+1, k);
        klevel(root.right, level+1, k);
    }




    // Transform to sum tree : 
    public static int transformToSum(Node root){
        if(root == null){
            return 0;
        }

        int leftchild = transformToSum(root.left);
        int rightchild = transformToSum(root.right);
        int data = root.data;

        int newleft = root.left == null ? 0 : root.left.data;
        int newright = root.right == null ? 0 : root.right.data;

        root.data = leftchild + rightchild + newleft + newright;
        return data;
    }



    // Kth ansistor of Node :
    public static int kAncestor(Node root,int n,int k){
        if(root == null){
            return -1;
        }
        if(root.data == n){
            return 0;
        }

        int leftDist = kAncestor(root.left, n, k);
        int rightDis = kAncestor(root.right, n, k);

        if(leftDist == -1 && rightDis == -1){
            return -1;
        }

        int max = Math.max(leftDist, rightDis);
        if(max+1 == k){
            System.out.println(root.data);
        }

        return max+1;
    }




    public static void main(String args[]){
        // int n[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        // binaryTree tree = new binaryTree();
        // Node root = tree.buildTree(n);
        // System.out.println("preorder :");
        // preOrder(root);
        // System.out.println();
        // System.out.println("inorder :");
        // inOreder(root);
        // System.out.println();
        // System.out.println("postorder :");
        // postOrder(root);
        // System.out.println();
        // System.out.println("levelOreder :");
        // levelOreder(root);
        // System.out.println(heightOfTree(root));
        // System.out.println(numberOfNodes(root));
        // System.out.println(sumOfNode(root));
        // System.out.println(diameter(root));
        // System.out.println(diameter2(root).dia);
        // System.out.println(diameter2(root).ht);
        // System.out.println(minDist(root, 4, 6));
        // System.out.println(isSubTree(root, root.left.left));
        Node root = new Node(1);
        root.left = new Node(2);
        root.left.left = new Node(4);
        root.left.left.left = new Node(8);
        root.left.right = new Node(5);
        root.right = new Node(3);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        // topView(root);
        // klevel(root, 0, 2);
        // System.out.println(lca1(root, 4,5).data);
        // transformToSum(root);
        // inOreder(root);
        kAncestor(root, 8, 1);
    }
}
