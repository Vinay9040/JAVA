public class Linkedlist {

    // declaretion of LInkedList
    static class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    // add in linkedlist : 1. addfirst 2. addlast
    // 1.add at first
    public void addFirst(int data) {
        Node newnode = new Node(data);
        size++;
        if (head == null) {
            head = tail = newnode;
            return;
        }
        newnode.next = head;
        head = newnode;
    }

    // 2. add at last
    public void addLast(int data) {
        Node newnode = new Node(data);
        size++;
        if (head == null) {
            head = tail = newnode;
            return;
        }
        tail.next = newnode;
        tail = newnode;
    }

    // print the linkedlist
    public static void printll() {
        if (head == null) {
            System.out.println("LL is empty !");
            return;
        }
        Node ptr = head;
        while (ptr != null) {
            System.out.print(ptr.data + "->");
            ptr = ptr.next;
        }
        System.out.println("null");
    }

    // add Node in middle:
    public void addAtMid(int idx, int data) {
        Node newnode = new Node(data);
        Node ptr = head;
        int i = 0;
        while (i < idx - 1) {
            ptr = ptr.next;
            i++;
        }
        // At i=idx-1 ->ptr->prev
        newnode.next = ptr.next;
        ptr.next = newnode;
    }

    // remove Node in ll : 1.removefirst_node 2. removelast_node

    // 1.remove first
    public static int removeAtFirst() {
        if (size == 0) {
            System.out.println("ll is empty");
            return Integer.MIN_VALUE;
        } else if (size == 1) {
            int val = head.data;
            head = tail = null;
            size = 0;
            return val;
        } else {
            int val = head.data;
            head = head.next;
            size--;
            return val;
        }
    }

    public static int removeAtLast() {
        if (size == 0) {
            System.out.println("ll is empty");
            return Integer.MIN_VALUE;
        } else if (size == 1) {
            int val = head.data;
            head = tail = null;
            size = 0;
            return val;
        }
        // prev : i = size-2;
        Node prev = head;
        for (int i = 0; i <= size - 2; i++) {
            prev = prev.next;
        }
        int val = prev.next.data;
        prev.next = null;
        tail = prev;
        size--;
        return val;
    }

    // Search(By iterative) : search for a key in a linked list.return the position
    // where it is found.
    public static int iterSearch(int key) {
        Node ptr = head;
        int i = 0;
        while (ptr != null) {
            if (ptr.data == key) {
                return i;
            }
            ptr = ptr.next;
            i++;
        }
        return -1;
    }

    // using recursion :
    private static int helper(Node head, int key) {
        if (head == null) {
            return -1;
        }
        if (head.data == key) {
            return 0;
        }
        int idx = helper(head.next, key);
        if (idx == -1) {
            return -1;
        }
        return idx + 1;
    }

    public static int recSearch(int key) {
        return helper(head, key);
    }

    // Reverse a linkedlist :
    public static void reverse() {
        Node prev = null;
        Node curr = tail = head;
        Node next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }

    // Find &remove Nth Node from end.(iterative approach)
    public static void deleteNthFromEnd(int n) {
        int sz = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            sz++;
        }
        if (n == sz) {
            head = head.next;
            return;
        }
        int i = 1, itoFind = sz - n;
        Node prev = head;
        while (i < itoFind) {
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
    }

    // check if list is a palindrome :
    // Aprroach : 1. find mid node (by slow-fast consept)
    //            2.2nd half reverse
    //            3. check 1st half == 2nd half
    //
    // slow-fast concept : even -> fast != null
    // odd -> fast.next != null

    public static Node findmid(Node head) {
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public static boolean checkpali() {
        if (head == null || head.next == null) {
            return true;
        }
        // step 1 -> find mid
        Node midnode = findmid(head);
        // step 2 -> reverse 2nd half
        Node prev = null;
        Node curr = midnode;
        Node next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        Node right = prev; // right half head
        Node left = head;

        while (right != null) {
            if (left.data != right.data) {
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;
    }

    // Delete a cycle in a Linkedlist (solve by floyd's cycle finding algo & with
    // slow-fast consept)
    public static boolean isCycle() {
        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return true;
            }
        }
        return false;
    }

    /*
         remove cycle in linkedlist
            approach : 1.find last node
                        delete cycle
                        slow = head then
                        slow --> 1 }
                        fast --> 1 } while(slow == fast)
                       2.lastnode.next = null
     */
    public static void removeCycle() {
        // deletecycle
        Node slow = head;
        Node fast = head;
        Boolean Cycle = false;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow) {
                Cycle = true;
                break;
            }
        }
        if (Cycle = false) {
            return;
        }

        // find meeting point
        slow = head;
        Node prev = null;
        while (slow != fast) {
            prev = fast;
            slow = slow.next;
            fast = fast.next;
        }
        // removing cycle
        prev.next = null;
    }

    /*
     * Linked List in java collection framework;(inbuild)
      
     * import java.util.LinkedList;
      
     * Declaration : LinkedList<Integer> LL = new LinkedList<>();
     */

    /*
     Merge sort in LinkedList :
     Steps :   1.find middel(by slow-fast)
                2.righthead = mid.next;
                   mid.next = null;
                   ms(head);
                   ms(rh);
                   3.head1,head2
                   Node mergeDll = new Node(-1);
                   Node temp = mergeLL;
                   while(h1 != null && h2 != null){
                   h1<-->h2 // compare
                   }
                   {h1,h2} if null
                   return mergeLL.next;
     */
    private static Node getMidd(Node head) {
        Node slow = head;
        Node fast = head.next;// Note it

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    private static Node Merge(Node head1, Node head2) {
        Node mergedll = new Node(-1);
        Node temp = mergedll;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                temp.next = head1;
                head1 = head1.next;
                temp = temp.next;
            } else {
                temp.next = head2;
                head2 = head2.next;
                temp = temp.next;
            }
        }

        while (head1 != null) {
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }

        while (head2 != null) {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }
        return mergedll.next;
    }

    public static Node MergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }
        // find mid
        Node mid = getMidd(head);
        // left & right MS
        Node righthead = mid.next;
        mid.next = null;
        Node newleft = MergeSort(head);
        Node newright = MergeSort(righthead);
        // merge
        return Merge(newleft, newright);
    }


    //zig-zag LL : for a linkedlist of the form : L(1)->L(n)->L(2)->L(n-1)->L(3)->..

    public static void zigZag(){
        //find mid
        Node slow = head;
        Node fast = head.next;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        Node mid = slow;
        //reverse 2nd half
        Node curr = mid.next;
        mid.next = null;
        Node prev = null;
        Node next;

        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        Node left = head;
        Node right = prev;
        Node nextl, nextr;

        //alternat merge - zigzag merge
        while(left != null && right != null){
            //zig-zag pattern
            nextl = left.next;
            left.next = right;
            nextr = right.next;
            right.next = nextl;
            //updation
            left = nextl;
            right = nextr;
        }
    }


    public static void main(String args[]) {
        Linkedlist ll = new Linkedlist();
        ll.addFirst(1);
        ll.addLast(2);
        ll.addLast(3);
        ll.addLast(4);
        ll.addLast(5);
        ll.addLast(6);
        ll.addLast(7);
        ll.addLast(8);
        ll.addLast(9);
        printll();
        System.out.println();
        System.out.println();
        zigZag();
        printll();
    }
}
